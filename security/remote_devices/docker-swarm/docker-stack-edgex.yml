# /*******************************************************************************
#  * Copyright 2020 Redis Labs
#  * Copyright 2020 Intel Corporation.
#  *
#  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
#  * in compliance with the License. You may obtain a copy of the License at
#  *
#  * http://www.apache.org/licenses/LICENSE-2.0
#  *
#  * Unless required by applicable law or agreed to in writing, software distributed under the License
#  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
#  * or implied. See the License for the specific language governing permissions and limitations under
#  * the License.
#  *
#  * @author: Andre Srinivasan, Redis Labs
#  * @author: Leonard Goodell, Intel
#  * EdgeX Foundry, Geneva, version 1.2.0
#  * added: May 14, 2020
#  *******************************************************************************/

version: '3.4'

# all common shared environment variables defined here:
x-common-env-variables: &common-variables
  Registry_Host: edgex-core-consul
  Clients_CoreData_Host: edgex-core-data
  Clients_Notifications_Host: edgex-support-notifications
  Clients_Metadata_Host: edgex-core-metadata
  Clients_Command_Host: edgex-core-command
  Clients_Scheduler_Host: edgex-support-scheduler
  Clients_RulesEngine_Host: edgex-kuiper
  Clients_VirtualDevice_Host: edgex-device-virtual
  Databases_Primary_Type: redisdb
  Databases_Primary_Host: edgex-redis
  Databases_Primary_Port: 6379
  SecretStore_Host: edgex-vault
  SecretStore_ServerName: edgex-vault
  SecretStore_RootCaCertPath: /tmp/edgex/secrets/ca/ca.pem
  Service_ServerBindAddr: "0.0.0.0"
  # Required in case old configuration from previous release used.
  # Change to "true" if re-enabling logging service for remote logging
  Logging_EnableRemote: "false"
  #  Clients_Logging_Host: edgex-support-logging # un-comment if re-enabling logging service for remote logging

# REDIS5_PASSWORD_PATHNAME must have the same value as
# security-secretstore-read/res/configuration.toml SecretStore.Passwordfile. Note edgex-go issue
# #2503 that will address this.
x-redis5-env-variables: &redis5-variables
  REDIS5_PASSWORD_PATHNAME: /tmp/edgex/secrets/edgex-redis/redis5-password

volumes:
  db-data:
  log-data:
  consul-config:
  consul-data:
  consul-scripts:
  vault-init:
  vault-config:
  vault-file:
  vault-logs:
  # non-shared volumes
  secrets-setup-cache:
  # Adding this section to mount edgex security volumes in docker swarm mode
  secrets-volume:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: /tmp/edgex/secrets/
  secrets-ca-volume:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: /tmp/edgex/secrets/ca/
  edgex-consul:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: /tmp/edgex/secrets/edgex-consul/
  edgex-vault:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: /tmp/edgex/secrets/edgex-vault/
  edgex-kong:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: /tmp/edgex/secrets/edgex-kong/
  edgex-security-proxy-setup:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: /tmp/edgex/secrets/edgex-security-proxy-setup/
  edgex-redis:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: /tmp/edgex/secrets/edgex-redis/
  docker-sock:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: /var/run/
  edgex-support-notifications:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: /tmp/edgex/secrets/edgex-support-notifications/
  edgex-core-metadata:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: /tmp/edgex/secrets/edgex-core-metadata/
  edgex-core-data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: /tmp/edgex/secrets/edgex-core-data/
  edgex-support-scheduler:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: /tmp/edgex/secrets/edgex-support-scheduler/
  edgex-core-command:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: /tmp/edgex/secrets/edgex-core-command/

services:
  consul:
    image: edgexfoundry/docker-edgex-consul:1.2.0
    ports:
      - "8400:8400"
      - "8500:8500"
    hostname: edgex-core-consul
    networks:
      edgex-network:
        aliases:
            - edgex-core-consul
    volumes:
      - consul-config:/consul/config:z
      - consul-data:/consul/data:z
      - consul-scripts:/consul/scripts:z
      - secrets-ca-volume:/tmp/edgex/secrets/ca:ro,z
      - edgex-consul:/tmp/edgex/secrets/edgex-consul:ro,z
      - edgex-vault:/tmp/edgex/secrets/edgex-vault:ro,z
      - edgex-kong:/tmp/edgex/secrets/edgex-kong:ro,z
    environment:
      - "SECRETSTORE_SETUP_DONE_FLAG=/tmp/edgex/secrets/edgex-consul/.secretstore-setup-done"
      - EDGEX_DB=redis
      - EDGEX_SECURE=true
      - CONSUL_BIND_INTERFACE=eth0
    depends_on:
      - security-secrets-setup
    deploy:
      placement: 
        constraints: 
          - node.hostname != worker-node 

  vault:
    image: vault:1.3.1
    hostname: edgex-vault
    networks:
      edgex-network:
        aliases:
            - edgex-vault
    ports:
      - target: 8200
        published: 8200
        protocol: tcp
        mode: host
    # cap_add not allowed in docker swarm, this is a security issue and I don't recommend disabling this in production
    # cap_add:
    #   - "IPC_LOCK"
    tmpfs:
      - /vault/config
    entrypoint: ["/vault/init/start_vault.sh"]
    environment:
      - VAULT_ADDR=https://edgex-vault:8200
      - VAULT_CONFIG_DIR=/vault/config
      - VAULT_UI=true
      - SKIP_SETCAP=true
      - |
        VAULT_LOCAL_CONFIG=
          listener "tcp" { 
              address = "edgex-vault:8200" 
              tls_disable = "0" 
              cluster_address = "edgex-vault:8201" 
              tls_min_version = "tls12" 
              tls_client_ca_file ="/tmp/edgex/secrets/edgex-vault/ca.pem" 
              tls_cert_file ="/tmp/edgex/secrets/edgex-vault/server.crt" 
              tls_key_file = "/tmp/edgex/secrets/edgex-vault/server.key" 
              tls_perfer_server_cipher_suites = "true"
          } 
          backend "consul" { 
              path = "vault/" 
              address = "edgex-core-consul:8500" 
              scheme = "http" 
              redirect_addr = "https://edgex-vault:8200" 
              cluster_addr = "https://edgex-vault:8201" 
          } 
          default_lease_ttl = "168h" 
          max_lease_ttl = "720h"
          disable_mlock = "true"
    volumes:
      - vault-file:/vault/file:z
      - vault-logs:/vault/logs:z
      - vault-init:/vault/init:ro,z
      - edgex-vault:/tmp/edgex/secrets/edgex-vault:ro,z
    depends_on:
      - consul
      - security-secrets-setup
    deploy: 
      endpoint_mode: dnsrr
      placement:
        constraints: 
          - node.hostname != worker-node 

  security-secrets-setup:
    # Using a pre-production nexus image because VAULT_LOCAL_CONFIG override ability isn't released yet 
    image: nexus3.edgexfoundry.org:10004/docker-security-secrets-setup-go:1.2.2-dev.17
    hostname: edgex-secrets-setup
    environment:
      <<: *redis5-variables
    tmpfs:
      - /tmp
      - /run
    command: "generate"
    volumes:
      - secrets-setup-cache:/etc/edgex/pki
      - vault-init:/vault/init:z
      - secrets-volume:/tmp/edgex/secrets:z
    deploy: 
      placement: 
        constraints: 
          - node.hostname != worker-node 

  vault-worker:
    image: edgexfoundry/docker-edgex-security-secretstore-setup-go:1.2.1
    hostname: edgex-vault-worker
    environment:
      <<: *redis5-variables
      SECRETSTORE_SETUP_DONE_FLAG: /tmp/edgex/secrets/edgex-consul/.secretstore-setup-done
    networks:
      edgex-network:
        aliases:
            - edgex-vault-worker
    tmpfs:
      - /run
    volumes:
      - vault-config:/vault/config:z
      - consul-scripts:/consul/scripts:ro,z
      - secrets-volume:/tmp/edgex/secrets:z
    depends_on:
      - security-secrets-setup
      - consul
      - vault
    deploy: 
      placement: 
        constraints: 
          - node.hostname != worker-node 

# # containers for reverse proxy
  kong-db:
    image: postgres:12.1-alpine
    hostname: kong-db
    networks:
      edgex-network:
        aliases:
            - kong-db
    ports:
        - "5432:5432"
    environment:
        - 'POSTGRES_DB=kong'
        - 'POSTGRES_USER=kong'
        - 'POSTGRES_PASSWORD=${KONG_POSTGRES_PASSWORD:-kong}'
    depends_on:
      - security-secrets-setup
    deploy: 
      placement: 
        constraints: 
          - node.hostname != worker-node 

  kong-migrations:
    image: kong:${KONG_VERSION:-2.0.1}
    networks:
      edgex-network:
        aliases:
            - kong-migrations
    environment:
        - 'KONG_DATABASE=postgres'
        - 'KONG_PG_HOST=kong-db'
        - 'KONG_PG_PASSWORD=${KONG_POSTGRES_PASSWORD:-kong}'
    command: >
      /bin/sh -cx 
      'until /consul/scripts/consul-svc-healthy.sh kong-db;
         do sleep 1;
      done && kong migrations bootstrap;
      kong migrations list;
      code=$$?;
      if [ $$code -eq 5 ]; then
        kong migrations up && kong migrations finish;
      fi'
    volumes:
      - consul-scripts:/consul/scripts:ro,z
    depends_on:
      - consul
      - kong-db
    deploy: 
      placement:
        constraints: 
          - node.hostname != worker-node 
      restart_policy:
        condition: on-failure


  kong:
    image: kong:${KONG_VERSION:-2.0.1}
    hostname: kong
    networks:
      edgex-network:
        aliases:
            - kong
    ports:
        - "8000:8000"
        - "8001:8001"
        - "8443:8443"
        - "8444:8444"
    tty: true
    environment:
        - 'KONG_DATABASE=postgres'
        - 'KONG_PG_HOST=kong-db'
        - 'KONG_PG_PASSWORD=${KONG_POSTGRES_PASSWORD:-kong}'
        - 'KONG_PROXY_ACCESS_LOG=/dev/stdout'
        - 'KONG_ADMIN_ACCESS_LOG=/dev/stdout'
        - 'KONG_PROXY_ERROR_LOG=/dev/stderr'
        - 'KONG_ADMIN_ERROR_LOG=/dev/stderr'
        - 'KONG_ADMIN_LISTEN=0.0.0.0:8001, 0.0.0.0:8444 ssl'
    command: >
      /bin/sh -c 
      "until /consul/scripts/consul-svc-healthy.sh kong-migrations; do sleep 1; done;
      /docker-entrypoint.sh kong docker-start"
    volumes:
      - consul-scripts:/consul/scripts:ro,z
    depends_on:
      - consul
      - kong-db
      - kong-migrations
    deploy: 
      placement: 
        constraints: 
          - node.hostname != worker-node 

  edgex-proxy:
    image: edgexfoundry/docker-edgex-security-proxy-setup-go:1.2.1
    hostname: edgex-proxy
    entrypoint: >
      /bin/sh -c 
      "until /consul/scripts/consul-svc-healthy.sh kong; do sleep 1; done;
      until /consul/scripts/consul-svc-healthy.sh security-secretstore-setup; do sleep 1; done;
      /edgex/security-proxy-setup --init=true"
    networks:
      edgex-network:
        aliases:
            - edgex-proxy
    environment:
      <<: *common-variables
      KongURL_Server: kong
      SecretService_Server: edgex-vault
      SecretService_TokenPath: /tmp/edgex/secrets/edgex-security-proxy-setup/secrets-token.json
      SecretService_CACertPath: /tmp/edgex/secrets/ca/ca.pem
      SecretService_SNIS: "edgex-kong"
    volumes:
      - consul-scripts:/consul/scripts:ro,z
      - secrets-ca-volume:/tmp/edgex/secrets/ca:ro,z
      - edgex-security-proxy-setup:/tmp/edgex/secrets/edgex-security-proxy-setup:ro,z
    depends_on:
      - consul
      - vault-worker
      - kong
    deploy: 
      placement:
        constraints: 
          - node.hostname != worker-node 
      restart_policy:
        condition: on-failure

# # end of containers for reverse proxy

  redis:
    image: redis:5.0.8-alpine
    ports:
      - "6379:6379"
    hostname: edgex-redis
    environment:
      <<: *redis5-variables
    command: |
      /bin/sh -c "
      until [ -r $${REDIS5_PASSWORD_PATHNAME} ] && [ -s $${REDIS5_PASSWORD_PATHNAME} ]; do sleep 1; done
      exec /usr/local/bin/docker-entrypoint.sh --requirepass `cat $${REDIS5_PASSWORD_PATHNAME}` \
        --dir /data \
        --save 900 1 \
        --save 300 10 \
        --save 60 10000
      "
    networks:
      edgex-network:
        aliases:
            - edgex-redis
    volumes:
      - db-data:/data:z
      - edgex-redis:/tmp/edgex/secrets/edgex-redis:z
    depends_on:
      - vault-worker
    deploy: 
      placement: 
        constraints: 
          - node.hostname != worker-node 

  notifications:
    image: edgexfoundry/docker-support-notifications-go:1.2.1
    ports:
      - "48060:48060"
    hostname: edgex-support-notifications
    networks:
      edgex-network:
        aliases:
            - edgex-support-notifications
    environment:
      <<: *common-variables
      Service_Host: edgex-support-notifications
      SecretStore_TokenFile: /tmp/edgex/secrets/edgex-support-notifications/secrets-token.json
    volumes:
      - secrets-ca-volume:/tmp/edgex/secrets/ca:ro,z
      - edgex-support-notifications:/tmp/edgex/secrets/edgex-support-notifications:ro,z
    depends_on:
      - consul
#      - logging  # uncomment if re-enabled remote logging
      - redis
      - vault-worker
    deploy: 
      placement: 
        constraints: 
          - node.hostname != worker-node 

  metadata:
    image: edgexfoundry/docker-core-metadata-go:1.2.1
    ports:
      - "48081:48081"
    hostname: edgex-core-metadata
    networks:
      edgex-network:
        aliases:
            - edgex-core-metadata
    environment:
      <<: *common-variables
      Service_Host: edgex-core-metadata
      Notifications_Sender: edgex-core-metadata
      SecretStore_TokenFile: /tmp/edgex/secrets/edgex-core-metadata/secrets-token.json
    volumes:
      - secrets-ca-volume:/tmp/edgex/secrets/ca:ro,z
      - edgex-core-metadata:/tmp/edgex/secrets/edgex-core-metadata:ro,z
    depends_on:
      - consul
#      - logging  # uncomment if re-enabled remote logging
      - redis
      - notifications
      - vault-worker
    deploy: 
      placement: 
        constraints: 
          - node.hostname != worker-node 

  data:
    image: edgexfoundry/docker-core-data-go:1.2.1
    ports:
      - "48080:48080"
      - "5563:5563"
    hostname: edgex-core-data
    networks:
      edgex-network:
        aliases:
          - edgex-core-data
    environment:
      <<: *common-variables
      Service_Host: "edgex-core-data"
      # Writable_LogLevel: TRACE
      SecretStore_TokenFile: /tmp/edgex/secrets/edgex-core-data/secrets-token.json
    volumes:
      - secrets-ca-volume:/tmp/edgex/secrets/ca:ro,z
      - edgex-core-data:/tmp/edgex/secrets/edgex-core-data:ro,z
    depends_on:
      - consul
#      - logging  # uncomment if re-enabled remote logging
      - redis
      - metadata
      - vault-worker
    deploy: 
      placement: 
        constraints: 
          - node.hostname != worker-node 

  command:
    image: edgexfoundry/docker-core-command-go:1.2.1
    ports:
      - "48082:48082"
    hostname: edgex-core-command
    networks:
      edgex-network:
        aliases:
          - edgex-core-command
    environment:
      <<: *common-variables
      Service_Host: edgex-core-command
      SecretStore_TokenFile: /tmp/edgex/secrets/edgex-core-command/secrets-token.json
    volumes:
      - secrets-ca-volume:/tmp/edgex/secrets/ca:ro,z
      - edgex-core-command:/tmp/edgex/secrets/edgex-core-command:ro,z
    depends_on:
      - consul
#      - logging  # uncomment if re-enabled remote logging
      - redis
      - metadata
      - vault-worker
    deploy: 
      placement: 
        constraints: 
          - node.hostname != worker-node 

  scheduler:
    image: edgexfoundry/docker-support-scheduler-go:1.2.1
    ports:
      - "48085:48085"
    hostname: edgex-support-scheduler
    networks:
      edgex-network:
        aliases:
          - edgex-support-scheduler
    environment:
      <<: *common-variables
      Service_Host: edgex-support-scheduler
      IntervalActions_ScrubPushed_Host: edgex-core-data
      IntervalActions_ScrubAged_Host: edgex-core-data
      SecretStore_TokenFile: /tmp/edgex/secrets/edgex-support-scheduler/secrets-token.json
    volumes:
      - secrets-ca-volume:/tmp/edgex/secrets/ca:ro,z
      - edgex-support-scheduler:/tmp/edgex/secrets/edgex-support-scheduler:ro,z
    depends_on:
      - consul
#      - logging  # uncomment if re-enabled remote logging
      - redis
      - vault-worker
    deploy: 
      placement: 
        constraints: 
          - node.hostname != worker-node 

#################################################################
# Device Services
#################################################################

# NOTE: # only device services on the remote machine this is by setting 
# deploy -> placement -> constraints to the honstname of the remote swarm machine

  device-virtual:
    image: edgexfoundry/docker-device-virtual-go:1.2.1
    hostname: edgex-device-virtual
    networks:
      edgex-network:
        aliases:
        - edgex-device-virtual
    environment:
      <<: *common-variables
      Service_Host: edgex-device-virtual
    # this deployment section is what keeps the container on the separate machine
    # here we are constraining the container based on hostname
    deploy: 
      placement: 
        constraints: 
          - node.hostname == worker-node

  device-rest:
    image: edgexfoundry/docker-device-rest-go:1.1.1
    ports:
      - "49986:49986"
    hostname: edgex-device-rest
    networks:
      edgex-network:
        aliases:
          - edgex-device-rest
    environment:
      <<: *common-variables
      Service_Host: edgex-device-rest
    depends_on:
      - data
      - command
    deploy: 
      placement: 
        constraints: 
          - node.hostname == worker-node

networks:
  edgex-network:
    driver: overlay
    attachable: true
    driver_opts:
      encrypted: "true"
