# Copyright (C) 2022 Intel Corporation
#
# SPDX-License-Identifier: Apache-2.0
#
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    org.edgexfoundry.service: {{.Values.edgex.app.ekuiper}}
  name: {{.Values.edgex.app.ekuiper}}
spec:
  replicas: {{.Values.edgex.replicas.ekuiper}}
  selector:
    matchLabels:
      org.edgexfoundry.service: {{.Values.edgex.app.ekuiper}}
  strategy: {}
  template:
    metadata:
      labels:
        org.edgexfoundry.service: {{.Values.edgex.app.ekuiper}}
    spec:
    {{- if and (eq .Values.edgex.security.enabled true) (or (eq .Values.edgex.storage.sharedVolumesAccessMode "ReadWriteOnce") (eq .Values.edgex.storage.useHostPath true))}}
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  org.edgexfoundry.service: {{ .Values.edgex.app.bootstrapper}}
              topologyKey: "kubernetes.io/hostname"
    {{- end}}
    {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
      {{- range .Values.imagePullSecrets }}
      - name: {{ . }}
      {{- end }}
    {{- end }}
      automountServiceAccountToken: false
      initContainers:
      - name: prep-volumes
        image: {{.Values.edgex.image.ekuiper.repository}}:{{.Values.edgex.image.ekuiper.tag}}
        imagePullPolicy: {{.Values.edgex.image.ekuiper.pullPolicy}}
        command: [ "sh", "-c", "chown -Rh 1001:1001 /kuiper/log /kuiper/data; cp -rpd /kuiper/etc/* /mnt/kuiper-etc/; cp -rpd /kuiper/plugins/* /mnt/kuiper-plugins/; exit 0" ]
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsUser: 0
          runAsGroup: 0
        volumeMounts:
          - mountPath: /kuiper/log
            name: kuiper-log
          - mountPath: /kuiper/data
            name: kuiper-data
          - mountPath: /mnt/kuiper-etc
            name: kuiper-etc
          - mountPath: /mnt/kuiper-plugins
            name: kuiper-plugins
      containers:
      - name: {{.Values.edgex.app.ekuiper}}
        image: {{.Values.edgex.image.ekuiper.repository}}:{{.Values.edgex.image.ekuiper.tag}}
        imagePullPolicy: {{.Values.edgex.image.ekuiper.pullPolicy}}
      {{- if .Values.edgex.security.enabled }}
        command: ["/edgex-init/kuiper_wait_install.sh"]
      {{- end}}
        ports:
        - containerPort: {{.Values.edgex.port.ekuiper}}
          name: "http"
      {{- if not .Values.edgex.security.enabled }}
        {{- if .Values.edgex.features.enableHostPort}}
          hostPort: {{.Values.edgex.port.ekuiper}}
          hostIP: {{.Values.edgex.hostPortInternalBind}}
        {{- end}}
      {{- end}}
        envFrom:
        - configMapRef:
            name: edgex-common-variables
        env:
        # - name: KUIPER__BASIC__DEBUG
        #   value: "true"
        - name: KUIPER__BASIC__CONSOLELOG
          value: "true"
        - name: KUIPER__BASIC__RESTPORT
          value: "{{.Values.edgex.port.ekuiper}}"
        - name: EDGEX__DEFAULT__TOPIC
          value: edgex/rules-events
        {{- if (eq .Values.edgex.features.messagebusbackend "redis") }}
        - name: CONNECTION__EDGEX__REDISMSGBUS__PORT
          value: "{{.Values.edgex.port.redis}}"
        - name: CONNECTION__EDGEX__REDISMSGBUS__PROTOCOL
          value: redis
        - name: CONNECTION__EDGEX__REDISMSGBUS__SERVER
          value: {{.Values.edgex.app.redis}}
        - name: CONNECTION__EDGEX__REDISMSGBUS__TYPE
          value: redis
        - name: EDGEX__DEFAULT__PORT
          value: "{{.Values.edgex.port.redis}}"
        - name: EDGEX__DEFAULT__PROTOCOL
          value: redis
        - name: EDGEX__DEFAULT__SERVER
          value: {{.Values.edgex.app.redis}}
        - name: EDGEX__DEFAULT__TYPE
          value: redis
        {{- end }}
        {{- if (eq .Values.edgex.features.messagebusbackend "mqtt") }}
        - name: CONNECTION__EDGEX__MQTTMSGBUS__PORT
          value: "{{.Values.edgex.port.mqttbroker}}"
        - name: CONNECTION__EDGEX__MQTTMSGBUS__PROTOCOL
          value: tcp
        - name: CONNECTION__EDGEX__MQTTMSGBUS__HOST
          value: {{.Values.edgex.app.mqttbroker}}
        - name: CONNECTION__EDGEX__MQTTMSGBUS__TYPE
          value: mqtt
        - name: CONNECTION__EDGEX__MQTTMSGBUS__AUTHMODE
          value: none
        - name: CONNECTION__EDGEX__MQTTMSGBUS__OPTIONAL__CLIENTID
          value: kupiper-rules-engine
        - name: CONNECTION__EDGEX__MQTTMSGBUS__OPTIONAL__KEEPALIVE
          value: "500"
        - name: EDGEX__DEFAULT__PORT
          value: "{{.Values.edgex.port.mqttbroker}}"
        - name: EDGEX__DEFAULT__PROTOCOL
          value: tcp
        - name: EDGEX__DEFAULT__SERVER
          value: {{.Values.edgex.app.mqttbroker}}
        - name: EDGEX__DEFAULT__TYPE
          value: mqtt
        - name: EDGEX__DEFAULT__OPTIONAL__CLIENTID
          value: kupiper-rules-engine
        - name: EDGEX__DEFAULT__OPTIONAL__KEEPALIVE
          value: "500"
        {{- end }}
        {{- if (eq .Values.edgex.features.messagebusbackend "nats") }}
        - name: CONNECTION__EDGEX__NATSMSGBUS__PORT
          value: "{{.Values.edgex.port.natsserver}}"
        - name: CONNECTION__EDGEX__NATSMSGBUS__PROTOCOL
          value: tcp
        - name: CONNECTION__EDGEX__NATSMSGBUS__SERVER
          value: {{.Values.edgex.app.natsserver}}
        - name: CONNECTION__EDGEX__NATSMSGBUS__TYPE
          value: nats-jetstream
        - name: CONNECTION__EDGEX__NATSMSGBUS__OPTIONAL__CLIENTID
          value: kupiper-rules-engine
        - name: EDGEX__DEFAULT__PORT
          value: "{{.Values.edgex.port.natsserver}}"
        - name: EDGEX__DEFAULT__PROTOCOL
          value: tcp
        - name: EDGEX__DEFAULT__SERVER
          value: {{.Values.edgex.app.natsserver}}
        - name: EDGEX__DEFAULT__TYPE
          value: nats-jetstream
        - name: EDGEX__DEFAULT__OPTIONAL__CLIENTID
          value: kupiper-rules-engine
        {{- end }}
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
        startupProbe:
          tcpSocket:
            port: {{.Values.edgex.port.ekuiper}}
          periodSeconds: 1
          failureThreshold: 120
        livenessProbe:
          tcpSocket:
            port: {{.Values.edgex.port.ekuiper}}
        volumeMounts:
          - mountPath: /kuiper/data
            name: kuiper-data
          - mountPath: /kuiper/etc
            name: kuiper-etc
          - mountPath: /kuiper/log
            name: kuiper-log
          - mountPath: /kuiper/plugins
            name: kuiper-plugins
          {{- if .Values.edgex.security.enabled }}
          - mountPath: /edgex-init
            name: edgex-init
          - mountPath: /kuiper/etc/sources
            name: kuiper-connections
          - mountPath: /kuiper/etc/connections
            name: kuiper-sources
          {{- end }}
      {{- if .Values.edgex.resources.ekuiper.enforceLimits }}
        resources:
          limits:
            memory: {{ .Values.edgex.resources.ekuiper.limits.memory }}
            cpu: {{ .Values.edgex.resources.ekuiper.limits.cpu }}
          requests:
            memory: {{ .Values.edgex.resources.ekuiper.requests.memory }}
            cpu: {{ .Values.edgex.resources.ekuiper.requests.cpu }}
      {{- end}}

      hostname: {{.Values.edgex.app.ekuiper}}
      restartPolicy: Always
      securityContext:
        runAsUser: 1001
        runAsGroup: 1001
      volumes:
        - name: kuiper-data
          persistentVolumeClaim:
            claimName: kuiper-data
        - name: kuiper-etc
          persistentVolumeClaim:
            claimName: kuiper-etc
        - name: kuiper-log
          persistentVolumeClaim:
            claimName: kuiper-log
        - name: kuiper-plugins
          persistentVolumeClaim:
            claimName: kuiper-plugins
        {{- if .Values.edgex.security.enabled }}
        - name: kuiper-sources
          persistentVolumeClaim:
            claimName: kuiper-sources
        - name: kuiper-connections
          persistentVolumeClaim:
            claimName: kuiper-connections
        - name: edgex-init
          persistentVolumeClaim:
            claimName: edgex-init
        {{- end }}
